{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","id":"Wlcz5zOYVpnS"},"outputs":[],"source":["#@title Imports - run this\n","import matplotlib.pyplot as plt\n","from matplotlib.animation import FuncAnimation\n","import numpy as np\n","from IPython.display import HTML\n","from matplotlib import rc\n","\n","rc('animation', embed_limit=100)"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","id":"ozYtORMUVpnU"},"outputs":[],"source":["#@title Run this cell\n","def setup_animation_two_cars(initial_position_car_1, initial_position_car_2, positions_car_1, positions_car_2):\n","    # Set up the figure and axes\n","    fig, ax_top = plt.subplots(figsize=(10, 5))  # Adjust figure size\n","\n","    # Top view (ax 0)\n","    road_length = 500  # Set road length to 500m\n","    ax_top.set_xlim(0, road_length)\n","    ax_top.set_ylim(-50, 50)  # Make the road 10x wider\n","    ax_top.set_aspect('equal')\n","    ax_top.axis('off')\n","\n","    # Draw the road\n","    road_top = plt.Rectangle((0, -20), road_length, 40, color='gray', alpha=0.5)\n","    ax_top.add_patch(road_top)\n","\n","    # Car representations (top view) as larger rectangles\n","    car_width = 10  # Increase width of the car in the top view\n","    car_height = 8  # Increase height of the car in the top view\n","    car_top_1 = plt.Rectangle((initial_position_car_1, -car_height / 2), car_width, car_height, color='blue')  # Initial position\n","    car_top_2 = plt.Rectangle((initial_position_car_2, -car_height / 2), car_width, car_height, color='red')  # Initial position\n","    ax_top.add_patch(car_top_1)\n","    ax_top.add_patch(car_top_2)\n","\n","    # Set title for the top view\n","    ax_top.set_title(\"Top View\")\n","\n","    # Mark the 220m position\n","    ax_top.axvline(x=220, color='green', linestyle='--')\n","\n","    # Initialization function\n","    def init():\n","        car_top_1.set_xy((initial_position_car_1, -car_height / 2))  # Reset car 1 position in the top view\n","        car_top_2.set_xy((initial_position_car_2, -car_height / 2))  # Reset car 2 position in the top view\n","        return car_top_1, car_top_2\n","\n","    # Animation update function\n","    def update(frame):\n","        x1 = positions_car_1[frame]\n","        x2 = positions_car_2[frame]\n","        # Update car positions (top view)\n","        car_top_1.set_x(x1)  # Move the car 1 rectangle horizontally\n","        car_top_2.set_x(x2)  # Move the car 2 rectangle horizontally\n","        return car_top_1, car_top_2\n","\n","    return fig, init, update"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l9hEo9AeVpnV","cellView":"form","colab":{"base_uri":"https://localhost:8080/","height":597,"output_embedded_package_id":"1D7FPrVgFgk3PXyyBC0BCUj88MFKQnukJ"},"executionInfo":{"status":"ok","timestamp":1742553768077,"user_tz":-60,"elapsed":31860,"user":{"displayName":"Wiktor Kwapiński","userId":"09281388724951988958"}},"outputId":"dbb7e2f4-79a4-4ee7-e520-80bd99f378fe"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["#@title Animation of cars. Use as hint.\n","\n","# Enable interactive plots in Jupyter Notebook\n","%matplotlib notebook\n","\n","# Parameters (adjustable)\n","initial_position_car_1 = 20  # Initial position of car 1\n","initial_position_car_2 = 0  # Initial position of car 2\n","initial_speed_car_1 = 20  # Initial speed of car 1\n","initial_speed_car_2 = 20  # Initial speed of car 2\n","acceleration_car_1 = 0  # Initial acceleration of car 1\n","acceleration_car_2 = 0  # Initial acceleration of car 2\n","total_time = 20  # seconds, total duration of the simulation\n","\n","# Function to calculate position based on previous position, velocity, and acceleration\n","def calculate_position(prev_position, prev_velocity, acceleration, dt):\n","    return prev_position + prev_velocity * dt + 0.5 * acceleration * dt**2\n","\n","# Function to calculate velocity based on previous velocity and acceleration\n","def calculate_velocity(prev_velocity, acceleration, dt):\n","    return prev_velocity + acceleration * dt\n","\n","# Generate time points\n","time_points = np.linspace(0, total_time, 500)\n","dt = time_points[1] - time_points[0]  # Time step\n","\n","# Initialize positions, velocities, and accelerations for both cars\n","positions_car_1 = [initial_position_car_1]\n","positions_car_2 = [initial_position_car_2]\n","velocities_car_1 = [initial_speed_car_1]\n","velocities_car_2 = [initial_speed_car_2]\n","\n","for t in time_points[1:]:\n","    # Car 1\n","    if positions_car_1[-1] >= 120:\n","        acceleration_car_1 = -1.5\n","    if positions_car_1[-1] >= 220:\n","        acceleration_car_1 = 4\n","\n","    new_velocity_car_1 = calculate_velocity(velocities_car_1[-1], acceleration_car_1, dt)\n","    new_position_car_1 = calculate_position(positions_car_1[-1], velocities_car_1[-1], acceleration_car_1, dt)\n","\n","    velocities_car_1.append(new_velocity_car_1)\n","    positions_car_1.append(new_position_car_1)\n","\n","    # Car 2\n","    if positions_car_2[-1] >= 100:\n","        acceleration_car_2 = -1.5\n","    if positions_car_2[-1] >= 200:\n","        acceleration_car_2 = 0\n","    if positions_car_2[-1] >= 220:\n","        acceleration_car_2 = 4\n","\n","    new_velocity_car_2 = calculate_velocity(velocities_car_2[-1], acceleration_car_2, dt)\n","    new_position_car_2 = calculate_position(positions_car_2[-1], velocities_car_2[-1], acceleration_car_2, dt)\n","\n","    velocities_car_2.append(new_velocity_car_2)\n","    positions_car_2.append(new_position_car_2)\n","\n","# Call the setup_animation_two_cars function\n","fig, init, update = setup_animation_two_cars(initial_position_car_1, initial_position_car_2, positions_car_1, positions_car_2)\n","\n","# Create animation\n","ani = FuncAnimation(fig, update, frames=len(time_points), init_func=init, blit=True, interval=20)  # Adjust interval for 20s total animation time\n","HTML(ani.to_jshtml())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ppps7QL_VpnW","cellView":"form","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1742553773829,"user_tz":-60,"elapsed":224,"user":{"displayName":"Wiktor Kwapiński","userId":"09281388724951988958"}},"outputId":"ee5765a0-5d4d-49d2-a97b-2cde077c2df0"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#@title Run this after solving the exercise to see distance-time plot\n","\n","%matplotlib inline\n","plt.plot(time_points, positions_car_1, label='Car 1')\n","plt.plot(time_points, positions_car_2, label='Car 2')\n","plt.axhline(y=300, color='gray', linestyle='--')\n","plt.axhline(y=100, color='gray', linestyle='--')  # Add another line at 100 meters\n","\n","# Find the intersection points for 300 meters\n","intersection_time_car_1_300 = np.interp(300, positions_car_1, time_points)\n","intersection_time_car_2_300 = np.interp(300, positions_car_2, time_points)\n","\n","# Find the intersection points for 100 meters\n","intersection_time_car_1_100 = np.interp(100, positions_car_1, time_points)\n","intersection_time_car_2_100 = np.interp(100, positions_car_2, time_points)\n","\n","# Mark the intersection points for 300 meters\n","plt.plot(intersection_time_car_1_300, 300, 'ro')\n","plt.plot(intersection_time_car_2_300, 300, 'ro')\n","\n","# Mark the intersection points for 100 meters\n","plt.plot(intersection_time_car_1_100, 100, 'bo')\n","plt.plot(intersection_time_car_2_100, 100, 'bo')\n","\n","plt.xlabel('Time (s)')\n","plt.ylabel('Position (m)')\n","plt.title('Position of Cars over Time')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tnQactKlVpnX","cellView":"form","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1742553785141,"user_tz":-60,"elapsed":313,"user":{"displayName":"Wiktor Kwapiński","userId":"09281388724951988958"}},"outputId":"388b7c27-8339-4a32-b058-df76e48d5d3e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#@title Run this after solving the exercise to see velocity-time plot\n","\n","%matplotlib inline\n","plt.plot(time_points, velocities_car_1, label='Car 1')\n","plt.plot(time_points, velocities_car_2, label='Car 2')\n","plt.xlabel('Time (s)')\n","plt.ylabel('Velocity (m/s)')\n","plt.title('Velocity of Cars over Time')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yA8Xecx1VpnW","cellView":"form","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742553788470,"user_tz":-60,"elapsed":29,"user":{"displayName":"Wiktor Kwapiński","userId":"09281388724951988958"}},"outputId":"09749f1f-6bc5-48e1-bbc2-285e1adc1b09"},"outputs":[{"output_type":"stream","name":"stdout","text":["Time difference between the intersection points at 300 meters: 2.00 seconds\n","Time difference between the intersection points at 100 meters: 1.00 seconds\n","Total delay is 1.00 seconds. Calculated from subtracting the two delays\n"]}],"source":["#@title Run this after solving the exercise for solution\n","\n","# Calculate the time differences\n","time_difference_300 = abs(intersection_time_car_1_300 - intersection_time_car_2_300)\n","time_difference_100 = abs(intersection_time_car_1_100 - intersection_time_car_2_100)\n","\n","print(f'Time difference between the intersection points at 300 meters: {time_difference_300:.2f} seconds')\n","print(f'Time difference between the intersection points at 100 meters: {time_difference_100:.2f} seconds')\n","\n","# Calculate the total delay\n","total_delay = abs(time_difference_300 - time_difference_100)\n","print(f'Total delay is {total_delay:.2f} seconds. Calculated from subtracting the two delays')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PbSmmqCnVpnX","cellView":"form"},"outputs":[],"source":["#@title Run this part !!\n","\n","def setup_animation(num_cars, initial_positions, positions):\n","    # Set up the figure and axes\n","    fig, ax_top = plt.subplots(figsize=(10, 5))  # Adjust figure size\n","\n","    # Top view (ax 0)\n","    road_length = 500  # Set road length to 500m\n","    ax_top.set_xlim(0, road_length)\n","    ax_top.set_ylim(-50, 50)  # Make the road 10x wider\n","    ax_top.set_aspect('equal')\n","    ax_top.axis('off')\n","\n","    # Draw the road\n","    road_top = plt.Rectangle((0, -20), road_length, 60, color='gray', alpha=0.5)\n","    ax_top.add_patch(road_top)\n","\n","    # Car representations (top view) as larger rectangles\n","    car_width = 10  # Increase width of the car in the top view\n","    car_height = 8  # Increase height of the car in the top view\n","    cars = [plt.Rectangle((initial_positions[i], -car_height / 2), car_width, car_height, color='blue') for i in range(num_cars)]\n","    for car in cars:\n","        ax_top.add_patch(car)\n","\n","    # Set title for the top view\n","    ax_top.set_title(\"Top View\")\n","\n","    # Mark the 220m position\n","    ax_top.axvline(x=220, color='green', linestyle='--')\n","\n","    # Initialization function\n","    def init():\n","        for i, car in enumerate(cars):\n","            car.set_xy((initial_positions[i], -car_height / 2))  # Reset car positions in the top view\n","        return cars\n","\n","    # Animation update function\n","    def update(frame):\n","        for i, car in enumerate(cars):\n","            x = positions[i][frame]\n","            car.set_x(x)  # Move the car rectangle horizontally\n","        return cars\n","\n","    return fig, init, update"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"00zrDEjTVpnX","cellView":"form","colab":{"base_uri":"https://localhost:8080/","height":597,"output_embedded_package_id":"1X6NKjTM6sGp6YXcJg9d1UBZ1SAYB66K6"},"executionInfo":{"status":"ok","timestamp":1742553946518,"user_tz":-60,"elapsed":19238,"user":{"displayName":"Wiktor Kwapiński","userId":"09281388724951988958"}},"outputId":"0c88fccc-3953-4c41-f63b-ae217e4ad2c7"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["#@title Animation of 10 cars. Use as a hint.\n","\n","# Enable interactive plots in Jupyter Notebook\n","%matplotlib notebook\n","\n","# Parameters (adjustable)\n","num_cars = 10\n","initial_positions = [20 - 20 * i for i in range(num_cars)]  # Initial positions of the cars\n","initial_speeds = [20] * num_cars  # Initial speeds of the cars\n","accelerations = [0] * num_cars  # Initial accelerations of the cars\n","total_time = 30  # seconds, total duration of the simulation\n","\n","# Function to calculate position based on previous position, velocity, and acceleration\n","def calculate_position(prev_position, prev_velocity, acceleration, dt):\n","    return prev_position + prev_velocity * dt + 0.5 * acceleration * dt**2\n","\n","# Function to calculate velocity based on previous velocity and acceleration\n","def calculate_velocity(prev_velocity, acceleration, dt):\n","    return prev_velocity + acceleration * dt\n","\n","# Generate time points\n","time_points = np.linspace(0, total_time, 500)\n","dt = time_points[1] - time_points[0]  # Time step\n","\n","# Initialize positions and velocities for all cars\n","positions = [[initial_positions[i]] for i in range(num_cars)]\n","velocities = [[initial_speeds[i]] for i in range(num_cars)]\n","\n","for t in time_points[1:]:\n","    for i in range(num_cars):\n","        # Update acceleration based on position of the first car\n","        if positions[0][-1] >= 120:\n","            accelerations = [-1.5] * num_cars\n","        if positions[0][-1] >= 220:\n","            accelerations = [0] * num_cars\n","\n","        # Update acceleration for each car individually after 220m\n","        if positions[i][-1] >= 220:\n","            accelerations[i] = 4\n","\n","        # Set acceleration to zero if velocity reaches 30\n","        if velocities[i][-1] >= 30:\n","            accelerations[i] = 0\n","\n","        new_velocity = calculate_velocity(velocities[i][-1], accelerations[i], dt)\n","        new_position = calculate_position(positions[i][-1], velocities[i][-1], accelerations[i], dt)\n","\n","        velocities[i].append(new_velocity)\n","        positions[i].append(new_position)\n","\n","# Call the setup_animation function\n","fig, init, update = setup_animation(num_cars, initial_positions, positions)\n","\n","# Create animation\n","ani = FuncAnimation(fig, update, frames=len(time_points), init_func=init, blit=True, interval=40)  # Adjust interval for 20s total animation time\n","HTML(ani.to_jshtml())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zC5MH7b9VpnY","cellView":"form","colab":{"base_uri":"https://localhost:8080/","height":333},"executionInfo":{"status":"error","timestamp":1742553946524,"user_tz":-60,"elapsed":5,"user":{"displayName":"Wiktor Kwapiński","userId":"09281388724951988958"}},"outputId":"f7349575-ff6f-4d21-9b57-596127f7d7ae"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["/* Put everything inside the global mpl namespace */\n","/* global mpl */\n","window.mpl = {};\n","\n","mpl.get_websocket_type = function () {\n","    if (typeof WebSocket !== 'undefined') {\n","        return WebSocket;\n","    } else if (typeof MozWebSocket !== 'undefined') {\n","        return MozWebSocket;\n","    } else {\n","        alert(\n","            'Your browser does not have WebSocket support. ' +\n","                'Please try Chrome, Safari or Firefox ≥ 6. ' +\n","                'Firefox 4 and 5 are also supported but you ' +\n","                'have to enable WebSockets in about:config.'\n","        );\n","    }\n","};\n","\n","mpl.figure = function (figure_id, websocket, ondownload, parent_element) {\n","    this.id = figure_id;\n","\n","    this.ws = websocket;\n","\n","    this.supports_binary = this.ws.binaryType !== undefined;\n","\n","    if (!this.supports_binary) {\n","        var warnings = document.getElementById('mpl-warnings');\n","        if (warnings) {\n","            warnings.style.display = 'block';\n","            warnings.textContent =\n","                'This browser does not support binary websocket messages. ' +\n","                'Performance may be slow.';\n","        }\n","    }\n","\n","    this.imageObj = new Image();\n","\n","    this.context = undefined;\n","    this.message = undefined;\n","    this.canvas = undefined;\n","    this.rubberband_canvas = undefined;\n","    this.rubberband_context = undefined;\n","    this.format_dropdown = undefined;\n","\n","    this.image_mode = 'full';\n","\n","    this.root = document.createElement('div');\n","    this.root.setAttribute('style', 'display: inline-block');\n","    this._root_extra_style(this.root);\n","\n","    parent_element.appendChild(this.root);\n","\n","    this._init_header(this);\n","    this._init_canvas(this);\n","    this._init_toolbar(this);\n","\n","    var fig = this;\n","\n","    this.waiting = false;\n","\n","    this.ws.onopen = function () {\n","        fig.send_message('supports_binary', { value: fig.supports_binary });\n","        fig.send_message('send_image_mode', {});\n","        if (fig.ratio !== 1) {\n","            fig.send_message('set_device_pixel_ratio', {\n","                device_pixel_ratio: fig.ratio,\n","            });\n","        }\n","        fig.send_message('refresh', {});\n","    };\n","\n","    this.imageObj.onload = function () {\n","        if (fig.image_mode === 'full') {\n","            // Full images could contain transparency (where diff images\n","            // almost always do), so we need to clear the canvas so that\n","            // there is no ghosting.\n","            fig.context.clearRect(0, 0, fig.canvas.width, fig.canvas.height);\n","        }\n","        fig.context.drawImage(fig.imageObj, 0, 0);\n","    };\n","\n","    this.imageObj.onunload = function () {\n","        fig.ws.close();\n","    };\n","\n","    this.ws.onmessage = this._make_on_message_function(this);\n","\n","    this.ondownload = ondownload;\n","};\n","\n","mpl.figure.prototype._init_header = function () {\n","    var titlebar = document.createElement('div');\n","    titlebar.classList =\n","        'ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix';\n","    var titletext = document.createElement('div');\n","    titletext.classList = 'ui-dialog-title';\n","    titletext.setAttribute(\n","        'style',\n","        'width: 100%; text-align: center; padding: 3px;'\n","    );\n","    titlebar.appendChild(titletext);\n","    this.root.appendChild(titlebar);\n","    this.header = titletext;\n","};\n","\n","mpl.figure.prototype._canvas_extra_style = function (_canvas_div) {};\n","\n","mpl.figure.prototype._root_extra_style = function (_canvas_div) {};\n","\n","mpl.figure.prototype._init_canvas = function () {\n","    var fig = this;\n","\n","    var canvas_div = (this.canvas_div = document.createElement('div'));\n","    canvas_div.setAttribute('tabindex', '0');\n","    canvas_div.setAttribute(\n","        'style',\n","        'border: 1px solid #ddd;' +\n","            'box-sizing: content-box;' +\n","            'clear: both;' +\n","            'min-height: 1px;' +\n","            'min-width: 1px;' +\n","            'outline: 0;' +\n","            'overflow: hidden;' +\n","            'position: relative;' +\n","            'resize: both;' +\n","            'z-index: 2;'\n","    );\n","\n","    function on_keyboard_event_closure(name) {\n","        return function (event) {\n","            return fig.key_event(event, name);\n","        };\n","    }\n","\n","    canvas_div.addEventListener(\n","        'keydown',\n","        on_keyboard_event_closure('key_press')\n","    );\n","    canvas_div.addEventListener(\n","        'keyup',\n","        on_keyboard_event_closure('key_release')\n","    );\n","\n","    this._canvas_extra_style(canvas_div);\n","    this.root.appendChild(canvas_div);\n","\n","    var canvas = (this.canvas = document.createElement('canvas'));\n","    canvas.classList.add('mpl-canvas');\n","    canvas.setAttribute(\n","        'style',\n","        'box-sizing: content-box;' +\n","            'pointer-events: none;' +\n","            'position: relative;' +\n","            'z-index: 0;'\n","    );\n","\n","    this.context = canvas.getContext('2d');\n","\n","    var backingStore =\n","        this.context.backingStorePixelRatio ||\n","        this.context.webkitBackingStorePixelRatio ||\n","        this.context.mozBackingStorePixelRatio ||\n","        this.context.msBackingStorePixelRatio ||\n","        this.context.oBackingStorePixelRatio ||\n","        this.context.backingStorePixelRatio ||\n","        1;\n","\n","    this.ratio = (window.devicePixelRatio || 1) / backingStore;\n","\n","    var rubberband_canvas = (this.rubberband_canvas = document.createElement(\n","        'canvas'\n","    ));\n","    rubberband_canvas.setAttribute(\n","        'style',\n","        'box-sizing: content-box;' +\n","            'left: 0;' +\n","            'pointer-events: none;' +\n","            'position: absolute;' +\n","            'top: 0;' +\n","            'z-index: 1;'\n","    );\n","\n","    // Apply a ponyfill if ResizeObserver is not implemented by browser.\n","    if (this.ResizeObserver === undefined) {\n","        if (window.ResizeObserver !== undefined) {\n","            this.ResizeObserver = window.ResizeObserver;\n","        } else {\n","            var obs = _JSXTOOLS_RESIZE_OBSERVER({});\n","            this.ResizeObserver = obs.ResizeObserver;\n","        }\n","    }\n","\n","    this.resizeObserverInstance = new this.ResizeObserver(function (entries) {\n","        // There's no need to resize if the WebSocket is not connected:\n","        // - If it is still connecting, then we will get an initial resize from\n","        //   Python once it connects.\n","        // - If it has disconnected, then resizing will clear the canvas and\n","        //   never get anything back to refill it, so better to not resize and\n","        //   keep something visible.\n","        if (fig.ws.readyState != 1) {\n","            return;\n","        }\n","        var nentries = entries.length;\n","        for (var i = 0; i < nentries; i++) {\n","            var entry = entries[i];\n","            var width, height;\n","            if (entry.contentBoxSize) {\n","                if (entry.contentBoxSize instanceof Array) {\n","                    // Chrome 84 implements new version of spec.\n","                    width = entry.contentBoxSize[0].inlineSize;\n","                    height = entry.contentBoxSize[0].blockSize;\n","                } else {\n","                    // Firefox implements old version of spec.\n","                    width = entry.contentBoxSize.inlineSize;\n","                    height = entry.contentBoxSize.blockSize;\n","                }\n","            } else {\n","                // Chrome <84 implements even older version of spec.\n","                width = entry.contentRect.width;\n","                height = entry.contentRect.height;\n","            }\n","\n","            // Keep the size of the canvas and rubber band canvas in sync with\n","            // the canvas container.\n","            if (entry.devicePixelContentBoxSize) {\n","                // Chrome 84 implements new version of spec.\n","                canvas.setAttribute(\n","                    'width',\n","                    entry.devicePixelContentBoxSize[0].inlineSize\n","                );\n","                canvas.setAttribute(\n","                    'height',\n","                    entry.devicePixelContentBoxSize[0].blockSize\n","                );\n","            } else {\n","                canvas.setAttribute('width', width * fig.ratio);\n","                canvas.setAttribute('height', height * fig.ratio);\n","            }\n","            /* This rescales the canvas back to display pixels, so that it\n","             * appears correct on HiDPI screens. */\n","            canvas.style.width = width + 'px';\n","            canvas.style.height = height + 'px';\n","\n","            rubberband_canvas.setAttribute('width', width);\n","            rubberband_canvas.setAttribute('height', height);\n","\n","            // And update the size in Python. We ignore the initial 0/0 size\n","            // that occurs as the element is placed into the DOM, which should\n","            // otherwise not happen due to the minimum size styling.\n","            if (width != 0 && height != 0) {\n","                fig.request_resize(width, height);\n","            }\n","        }\n","    });\n","    this.resizeObserverInstance.observe(canvas_div);\n","\n","    function on_mouse_event_closure(name) {\n","        /* User Agent sniffing is bad, but WebKit is busted:\n","         * https://bugs.webkit.org/show_bug.cgi?id=144526\n","         * https://bugs.webkit.org/show_bug.cgi?id=181818\n","         * The worst that happens here is that they get an extra browser\n","         * selection when dragging, if this check fails to catch them.\n","         */\n","        var UA = navigator.userAgent;\n","        var isWebKit = /AppleWebKit/.test(UA) && !/Chrome/.test(UA);\n","        if(isWebKit) {\n","            return function (event) {\n","                /* This prevents the web browser from automatically changing to\n","                 * the text insertion cursor when the button is pressed. We\n","                 * want to control all of the cursor setting manually through\n","                 * the 'cursor' event from matplotlib */\n","                event.preventDefault()\n","                return fig.mouse_event(event, name);\n","            };\n","        } else {\n","            return function (event) {\n","                return fig.mouse_event(event, name);\n","            };\n","        }\n","    }\n","\n","    canvas_div.addEventListener(\n","        'mousedown',\n","        on_mouse_event_closure('button_press')\n","    );\n","    canvas_div.addEventListener(\n","        'mouseup',\n","        on_mouse_event_closure('button_release')\n","    );\n","    canvas_div.addEventListener(\n","        'dblclick',\n","        on_mouse_event_closure('dblclick')\n","    );\n","    // Throttle sequential mouse events to 1 every 20ms.\n","    canvas_div.addEventListener(\n","        'mousemove',\n","        on_mouse_event_closure('motion_notify')\n","    );\n","\n","    canvas_div.addEventListener(\n","        'mouseenter',\n","        on_mouse_event_closure('figure_enter')\n","    );\n","    canvas_div.addEventListener(\n","        'mouseleave',\n","        on_mouse_event_closure('figure_leave')\n","    );\n","\n","    canvas_div.addEventListener('wheel', function (event) {\n","        if (event.deltaY < 0) {\n","            event.step = 1;\n","        } else {\n","            event.step = -1;\n","        }\n","        on_mouse_event_closure('scroll')(event);\n","    });\n","\n","    canvas_div.appendChild(canvas);\n","    canvas_div.appendChild(rubberband_canvas);\n","\n","    this.rubberband_context = rubberband_canvas.getContext('2d');\n","    this.rubberband_context.strokeStyle = '#000000';\n","\n","    this._resize_canvas = function (width, height, forward) {\n","        if (forward) {\n","            canvas_div.style.width = width + 'px';\n","            canvas_div.style.height = height + 'px';\n","        }\n","    };\n","\n","    // Disable right mouse context menu.\n","    canvas_div.addEventListener('contextmenu', function (_e) {\n","        event.preventDefault();\n","        return false;\n","    });\n","\n","    function set_focus() {\n","        canvas.focus();\n","        canvas_div.focus();\n","    }\n","\n","    window.setTimeout(set_focus, 100);\n","};\n","\n","mpl.figure.prototype._init_toolbar = function () {\n","    var fig = this;\n","\n","    var toolbar = document.createElement('div');\n","    toolbar.classList = 'mpl-toolbar';\n","    this.root.appendChild(toolbar);\n","\n","    function on_click_closure(name) {\n","        return function (_event) {\n","            return fig.toolbar_button_onclick(name);\n","        };\n","    }\n","\n","    function on_mouseover_closure(tooltip) {\n","        return function (event) {\n","            if (!event.currentTarget.disabled) {\n","                return fig.toolbar_button_onmouseover(tooltip);\n","            }\n","        };\n","    }\n","\n","    fig.buttons = {};\n","    var buttonGroup = document.createElement('div');\n","    buttonGroup.classList = 'mpl-button-group';\n","    for (var toolbar_ind in mpl.toolbar_items) {\n","        var name = mpl.toolbar_items[toolbar_ind][0];\n","        var tooltip = mpl.toolbar_items[toolbar_ind][1];\n","        var image = mpl.toolbar_items[toolbar_ind][2];\n","        var method_name = mpl.toolbar_items[toolbar_ind][3];\n","\n","        if (!name) {\n","            /* Instead of a spacer, we start a new button group. */\n","            if (buttonGroup.hasChildNodes()) {\n","                toolbar.appendChild(buttonGroup);\n","            }\n","            buttonGroup = document.createElement('div');\n","            buttonGroup.classList = 'mpl-button-group';\n","            continue;\n","        }\n","\n","        var button = (fig.buttons[name] = document.createElement('button'));\n","        button.classList = 'mpl-widget';\n","        button.setAttribute('role', 'button');\n","        button.setAttribute('aria-disabled', 'false');\n","        button.addEventListener('click', on_click_closure(method_name));\n","        button.addEventListener('mouseover', on_mouseover_closure(tooltip));\n","\n","        var icon_img = document.createElement('img');\n","        icon_img.src = '_images/' + image + '.png';\n","        icon_img.srcset = '_images/' + image + '_large.png 2x';\n","        icon_img.alt = tooltip;\n","        button.appendChild(icon_img);\n","\n","        buttonGroup.appendChild(button);\n","    }\n","\n","    if (buttonGroup.hasChildNodes()) {\n","        toolbar.appendChild(buttonGroup);\n","    }\n","\n","    var fmt_picker = document.createElement('select');\n","    fmt_picker.classList = 'mpl-widget';\n","    toolbar.appendChild(fmt_picker);\n","    this.format_dropdown = fmt_picker;\n","\n","    for (var ind in mpl.extensions) {\n","        var fmt = mpl.extensions[ind];\n","        var option = document.createElement('option');\n","        option.selected = fmt === mpl.default_extension;\n","        option.innerHTML = fmt;\n","        fmt_picker.appendChild(option);\n","    }\n","\n","    var status_bar = document.createElement('span');\n","    status_bar.classList = 'mpl-message';\n","    toolbar.appendChild(status_bar);\n","    this.message = status_bar;\n","};\n","\n","mpl.figure.prototype.request_resize = function (x_pixels, y_pixels) {\n","    // Request matplotlib to resize the figure. Matplotlib will then trigger a resize in the client,\n","    // which will in turn request a refresh of the image.\n","    this.send_message('resize', { width: x_pixels, height: y_pixels });\n","};\n","\n","mpl.figure.prototype.send_message = function (type, properties) {\n","    properties['type'] = type;\n","    properties['figure_id'] = this.id;\n","    this.ws.send(JSON.stringify(properties));\n","};\n","\n","mpl.figure.prototype.send_draw_message = function () {\n","    if (!this.waiting) {\n","        this.waiting = true;\n","        this.ws.send(JSON.stringify({ type: 'draw', figure_id: this.id }));\n","    }\n","};\n","\n","mpl.figure.prototype.handle_save = function (fig, _msg) {\n","    var format_dropdown = fig.format_dropdown;\n","    var format = format_dropdown.options[format_dropdown.selectedIndex].value;\n","    fig.ondownload(fig, format);\n","};\n","\n","mpl.figure.prototype.handle_resize = function (fig, msg) {\n","    var size = msg['size'];\n","    if (size[0] !== fig.canvas.width || size[1] !== fig.canvas.height) {\n","        fig._resize_canvas(size[0], size[1], msg['forward']);\n","        fig.send_message('refresh', {});\n","    }\n","};\n","\n","mpl.figure.prototype.handle_rubberband = function (fig, msg) {\n","    var x0 = msg['x0'] / fig.ratio;\n","    var y0 = (fig.canvas.height - msg['y0']) / fig.ratio;\n","    var x1 = msg['x1'] / fig.ratio;\n","    var y1 = (fig.canvas.height - msg['y1']) / fig.ratio;\n","    x0 = Math.floor(x0) + 0.5;\n","    y0 = Math.floor(y0) + 0.5;\n","    x1 = Math.floor(x1) + 0.5;\n","    y1 = Math.floor(y1) + 0.5;\n","    var min_x = Math.min(x0, x1);\n","    var min_y = Math.min(y0, y1);\n","    var width = Math.abs(x1 - x0);\n","    var height = Math.abs(y1 - y0);\n","\n","    fig.rubberband_context.clearRect(\n","        0,\n","        0,\n","        fig.canvas.width / fig.ratio,\n","        fig.canvas.height / fig.ratio\n","    );\n","\n","    fig.rubberband_context.strokeRect(min_x, min_y, width, height);\n","};\n","\n","mpl.figure.prototype.handle_figure_label = function (fig, msg) {\n","    // Updates the figure title.\n","    fig.header.textContent = msg['label'];\n","};\n","\n","mpl.figure.prototype.handle_cursor = function (fig, msg) {\n","    fig.canvas_div.style.cursor = msg['cursor'];\n","};\n","\n","mpl.figure.prototype.handle_message = function (fig, msg) {\n","    fig.message.textContent = msg['message'];\n","};\n","\n","mpl.figure.prototype.handle_draw = function (fig, _msg) {\n","    // Request the server to send over a new figure.\n","    fig.send_draw_message();\n","};\n","\n","mpl.figure.prototype.handle_image_mode = function (fig, msg) {\n","    fig.image_mode = msg['mode'];\n","};\n","\n","mpl.figure.prototype.handle_history_buttons = function (fig, msg) {\n","    for (var key in msg) {\n","        if (!(key in fig.buttons)) {\n","            continue;\n","        }\n","        fig.buttons[key].disabled = !msg[key];\n","        fig.buttons[key].setAttribute('aria-disabled', !msg[key]);\n","    }\n","};\n","\n","mpl.figure.prototype.handle_navigate_mode = function (fig, msg) {\n","    if (msg['mode'] === 'PAN') {\n","        fig.buttons['Pan'].classList.add('active');\n","        fig.buttons['Zoom'].classList.remove('active');\n","    } else if (msg['mode'] === 'ZOOM') {\n","        fig.buttons['Pan'].classList.remove('active');\n","        fig.buttons['Zoom'].classList.add('active');\n","    } else {\n","        fig.buttons['Pan'].classList.remove('active');\n","        fig.buttons['Zoom'].classList.remove('active');\n","    }\n","};\n","\n","mpl.figure.prototype.updated_canvas_event = function () {\n","    // Called whenever the canvas gets updated.\n","    this.send_message('ack', {});\n","};\n","\n","// A function to construct a web socket function for onmessage handling.\n","// Called in the figure constructor.\n","mpl.figure.prototype._make_on_message_function = function (fig) {\n","    return function socket_on_message(evt) {\n","        if (evt.data instanceof Blob) {\n","            var img = evt.data;\n","            if (img.type !== 'image/png') {\n","                /* FIXME: We get \"Resource interpreted as Image but\n","                 * transferred with MIME type text/plain:\" errors on\n","                 * Chrome.  But how to set the MIME type?  It doesn't seem\n","                 * to be part of the websocket stream */\n","                img.type = 'image/png';\n","            }\n","\n","            /* Free the memory for the previous frames */\n","            if (fig.imageObj.src) {\n","                (window.URL || window.webkitURL).revokeObjectURL(\n","                    fig.imageObj.src\n","                );\n","            }\n","\n","            fig.imageObj.src = (window.URL || window.webkitURL).createObjectURL(\n","                img\n","            );\n","            fig.updated_canvas_event();\n","            fig.waiting = false;\n","            return;\n","        } else if (\n","            typeof evt.data === 'string' &&\n","            evt.data.slice(0, 21) === 'data:image/png;base64'\n","        ) {\n","            fig.imageObj.src = evt.data;\n","            fig.updated_canvas_event();\n","            fig.waiting = false;\n","            return;\n","        }\n","\n","        var msg = JSON.parse(evt.data);\n","        var msg_type = msg['type'];\n","\n","        // Call the  \"handle_{type}\" callback, which takes\n","        // the figure and JSON message as its only arguments.\n","        try {\n","            var callback = fig['handle_' + msg_type];\n","        } catch (e) {\n","            console.log(\n","                \"No handler for the '\" + msg_type + \"' message type: \",\n","                msg\n","            );\n","            return;\n","        }\n","\n","        if (callback) {\n","            try {\n","                // console.log(\"Handling '\" + msg_type + \"' message: \", msg);\n","                callback(fig, msg);\n","            } catch (e) {\n","                console.log(\n","                    \"Exception inside the 'handler_\" + msg_type + \"' callback:\",\n","                    e,\n","                    e.stack,\n","                    msg\n","                );\n","            }\n","        }\n","    };\n","};\n","\n","function getModifiers(event) {\n","    var mods = [];\n","    if (event.ctrlKey) {\n","        mods.push('ctrl');\n","    }\n","    if (event.altKey) {\n","        mods.push('alt');\n","    }\n","    if (event.shiftKey) {\n","        mods.push('shift');\n","    }\n","    if (event.metaKey) {\n","        mods.push('meta');\n","    }\n","    return mods;\n","}\n","\n","/*\n"," * return a copy of an object with only non-object keys\n"," * we need this to avoid circular references\n"," * https://stackoverflow.com/a/24161582/3208463\n"," */\n","function simpleKeys(original) {\n","    return Object.keys(original).reduce(function (obj, key) {\n","        if (typeof original[key] !== 'object') {\n","            obj[key] = original[key];\n","        }\n","        return obj;\n","    }, {});\n","}\n","\n","mpl.figure.prototype.mouse_event = function (event, name) {\n","    if (name === 'button_press') {\n","        this.canvas.focus();\n","        this.canvas_div.focus();\n","    }\n","\n","    // from https://stackoverflow.com/q/1114465\n","    var boundingRect = this.canvas.getBoundingClientRect();\n","    var x = (event.clientX - boundingRect.left) * this.ratio;\n","    var y = (event.clientY - boundingRect.top) * this.ratio;\n","\n","    this.send_message(name, {\n","        x: x,\n","        y: y,\n","        button: event.button,\n","        step: event.step,\n","        buttons: event.buttons,\n","        modifiers: getModifiers(event),\n","        guiEvent: simpleKeys(event),\n","    });\n","\n","    return false;\n","};\n","\n","mpl.figure.prototype._key_event_extra = function (_event, _name) {\n","    // Handle any extra behaviour associated with a key event\n","};\n","\n","mpl.figure.prototype.key_event = function (event, name) {\n","    // Prevent repeat events\n","    if (name === 'key_press') {\n","        if (event.key === this._key) {\n","            return;\n","        } else {\n","            this._key = event.key;\n","        }\n","    }\n","    if (name === 'key_release') {\n","        this._key = null;\n","    }\n","\n","    var value = '';\n","    if (event.ctrlKey && event.key !== 'Control') {\n","        value += 'ctrl+';\n","    }\n","    else if (event.altKey && event.key !== 'Alt') {\n","        value += 'alt+';\n","    }\n","    else if (event.shiftKey && event.key !== 'Shift') {\n","        value += 'shift+';\n","    }\n","\n","    value += 'k' + event.key;\n","\n","    this._key_event_extra(event, name);\n","\n","    this.send_message(name, { key: value, guiEvent: simpleKeys(event) });\n","    return false;\n","};\n","\n","mpl.figure.prototype.toolbar_button_onclick = function (name) {\n","    if (name === 'download') {\n","        this.handle_save(this, null);\n","    } else {\n","        this.send_message('toolbar_button', { name: name });\n","    }\n","};\n","\n","mpl.figure.prototype.toolbar_button_onmouseover = function (tooltip) {\n","    this.message.textContent = tooltip;\n","};\n","\n","///////////////// REMAINING CONTENT GENERATED BY embed_js.py /////////////////\n","// prettier-ignore\n","var _JSXTOOLS_RESIZE_OBSERVER=function(A){var t,i=new WeakMap,n=new WeakMap,a=new WeakMap,r=new WeakMap,o=new Set;function s(e){if(!(this instanceof s))throw new TypeError(\"Constructor requires 'new' operator\");i.set(this,e)}function h(){throw new TypeError(\"Function is not a constructor\")}function c(e,t,i,n){e=0 in arguments?Number(arguments[0]):0,t=1 in arguments?Number(arguments[1]):0,i=2 in arguments?Number(arguments[2]):0,n=3 in arguments?Number(arguments[3]):0,this.right=(this.x=this.left=e)+(this.width=i),this.bottom=(this.y=this.top=t)+(this.height=n),Object.freeze(this)}function d(){t=requestAnimationFrame(d);var s=new WeakMap,p=new Set;o.forEach((function(t){r.get(t).forEach((function(i){var r=t instanceof window.SVGElement,o=a.get(t),d=r?0:parseFloat(o.paddingTop),f=r?0:parseFloat(o.paddingRight),l=r?0:parseFloat(o.paddingBottom),u=r?0:parseFloat(o.paddingLeft),g=r?0:parseFloat(o.borderTopWidth),m=r?0:parseFloat(o.borderRightWidth),w=r?0:parseFloat(o.borderBottomWidth),b=u+f,F=d+l,v=(r?0:parseFloat(o.borderLeftWidth))+m,W=g+w,y=r?0:t.offsetHeight-W-t.clientHeight,E=r?0:t.offsetWidth-v-t.clientWidth,R=b+v,z=F+W,M=r?t.width:parseFloat(o.width)-R-E,O=r?t.height:parseFloat(o.height)-z-y;if(n.has(t)){var k=n.get(t);if(k[0]===M&&k[1]===O)return}n.set(t,[M,O]);var S=Object.create(h.prototype);S.target=t,S.contentRect=new c(u,d,M,O),s.has(i)||(s.set(i,[]),p.add(i)),s.get(i).push(S)}))})),p.forEach((function(e){i.get(e).call(e,s.get(e),e)}))}return s.prototype.observe=function(i){if(i instanceof window.Element){r.has(i)||(r.set(i,new Set),o.add(i),a.set(i,window.getComputedStyle(i)));var n=r.get(i);n.has(this)||n.add(this),cancelAnimationFrame(t),t=requestAnimationFrame(d)}},s.prototype.unobserve=function(i){if(i instanceof window.Element&&r.has(i)){var n=r.get(i);n.has(this)&&(n.delete(this),n.size||(r.delete(i),o.delete(i))),n.size||r.delete(i),o.size||cancelAnimationFrame(t)}},A.DOMRectReadOnly=c,A.ResizeObserver=s,A.ResizeObserverEntry=h,A}; // eslint-disable-line\n","mpl.toolbar_items = [[\"Home\", \"Reset original view\", \"fa fa-home\", \"home\"], [\"Back\", \"Back to previous view\", \"fa fa-arrow-left\", \"back\"], [\"Forward\", \"Forward to next view\", \"fa fa-arrow-right\", \"forward\"], [\"\", \"\", \"\", \"\"], [\"Pan\", \"Left button pans, Right button zooms\\nx/y fixes axis, CTRL fixes aspect\", \"fa fa-arrows\", \"pan\"], [\"Zoom\", \"Zoom to rectangle\\nx/y fixes axis\", \"fa fa-square-o\", \"zoom\"], [\"\", \"\", \"\", \"\"], [\"Download\", \"Download plot\", \"fa fa-floppy-o\", \"download\"]];\n","\n","mpl.extensions = [\"eps\", \"jpeg\", \"pgf\", \"pdf\", \"png\", \"ps\", \"raw\", \"svg\", \"tif\", \"webp\"];\n","\n","mpl.default_extension = \"png\";/* global mpl */\n","\n","var comm_websocket_adapter = function (comm) {\n","    // Create a \"websocket\"-like object which calls the given IPython comm\n","    // object with the appropriate methods. Currently this is a non binary\n","    // socket, so there is still some room for performance tuning.\n","    var ws = {};\n","\n","    ws.binaryType = comm.kernel.ws.binaryType;\n","    ws.readyState = comm.kernel.ws.readyState;\n","    function updateReadyState(_event) {\n","        if (comm.kernel.ws) {\n","            ws.readyState = comm.kernel.ws.readyState;\n","        } else {\n","            ws.readyState = 3; // Closed state.\n","        }\n","    }\n","    comm.kernel.ws.addEventListener('open', updateReadyState);\n","    comm.kernel.ws.addEventListener('close', updateReadyState);\n","    comm.kernel.ws.addEventListener('error', updateReadyState);\n","\n","    ws.close = function () {\n","        comm.close();\n","    };\n","    ws.send = function (m) {\n","        //console.log('sending', m);\n","        comm.send(m);\n","    };\n","    // Register the callback with on_msg.\n","    comm.on_msg(function (msg) {\n","        //console.log('receiving', msg['content']['data'], msg);\n","        var data = msg['content']['data'];\n","        if (data['blob'] !== undefined) {\n","            data = {\n","                data: new Blob(msg['buffers'], { type: data['blob'] }),\n","            };\n","        }\n","        // Pass the mpl event to the overridden (by mpl) onmessage function.\n","        ws.onmessage(data);\n","    });\n","    return ws;\n","};\n","\n","mpl.mpl_figure_comm = function (comm, msg) {\n","    // This is the function which gets called when the mpl process\n","    // starts-up an IPython Comm through the \"matplotlib\" channel.\n","\n","    var id = msg.content.data.id;\n","    // Get hold of the div created by the display call when the Comm\n","    // socket was opened in Python.\n","    var element = document.getElementById(id);\n","    var ws_proxy = comm_websocket_adapter(comm);\n","\n","    function ondownload(figure, _format) {\n","        window.open(figure.canvas.toDataURL());\n","    }\n","\n","    var fig = new mpl.figure(id, ws_proxy, ondownload, element);\n","\n","    // Call onopen now - mpl needs it, as it is assuming we've passed it a real\n","    // web socket which is closed, not our websocket->open comm proxy.\n","    ws_proxy.onopen();\n","\n","    fig.parent_element = element;\n","    fig.cell_info = mpl.find_output_cell(\"<div id='\" + id + \"'></div>\");\n","    if (!fig.cell_info) {\n","        console.error('Failed to find cell for figure', id, fig);\n","        return;\n","    }\n","    fig.cell_info[0].output_area.element.on(\n","        'cleared',\n","        { fig: fig },\n","        fig._remove_fig_handler\n","    );\n","};\n","\n","mpl.figure.prototype.handle_close = function (fig, msg) {\n","    var width = fig.canvas.width / fig.ratio;\n","    fig.cell_info[0].output_area.element.off(\n","        'cleared',\n","        fig._remove_fig_handler\n","    );\n","    fig.resizeObserverInstance.unobserve(fig.canvas_div);\n","\n","    // Update the output cell to use the data from the current canvas.\n","    fig.push_to_output();\n","    var dataURL = fig.canvas.toDataURL();\n","    // Re-enable the keyboard manager in IPython - without this line, in FF,\n","    // the notebook keyboard shortcuts fail.\n","    IPython.keyboard_manager.enable();\n","    fig.parent_element.innerHTML =\n","        '<img src=\"' + dataURL + '\" width=\"' + width + '\">';\n","    fig.close_ws(fig, msg);\n","};\n","\n","mpl.figure.prototype.close_ws = function (fig, msg) {\n","    fig.send_message('closing', msg);\n","    // fig.ws.close()\n","};\n","\n","mpl.figure.prototype.push_to_output = function (_remove_interactive) {\n","    // Turn the data on the canvas into data in the output cell.\n","    var width = this.canvas.width / this.ratio;\n","    var dataURL = this.canvas.toDataURL();\n","    this.cell_info[1]['text/html'] =\n","        '<img src=\"' + dataURL + '\" width=\"' + width + '\">';\n","};\n","\n","mpl.figure.prototype.updated_canvas_event = function () {\n","    // Tell IPython that the notebook contents must change.\n","    IPython.notebook.set_dirty(true);\n","    this.send_message('ack', {});\n","    var fig = this;\n","    // Wait a second, then push the new image to the DOM so\n","    // that it is saved nicely (might be nice to debounce this).\n","    setTimeout(function () {\n","        fig.push_to_output();\n","    }, 1000);\n","};\n","\n","mpl.figure.prototype._init_toolbar = function () {\n","    var fig = this;\n","\n","    var toolbar = document.createElement('div');\n","    toolbar.classList = 'btn-toolbar';\n","    this.root.appendChild(toolbar);\n","\n","    function on_click_closure(name) {\n","        return function (_event) {\n","            return fig.toolbar_button_onclick(name);\n","        };\n","    }\n","\n","    function on_mouseover_closure(tooltip) {\n","        return function (event) {\n","            if (!event.currentTarget.disabled) {\n","                return fig.toolbar_button_onmouseover(tooltip);\n","            }\n","        };\n","    }\n","\n","    fig.buttons = {};\n","    var buttonGroup = document.createElement('div');\n","    buttonGroup.classList = 'btn-group';\n","    var button;\n","    for (var toolbar_ind in mpl.toolbar_items) {\n","        var name = mpl.toolbar_items[toolbar_ind][0];\n","        var tooltip = mpl.toolbar_items[toolbar_ind][1];\n","        var image = mpl.toolbar_items[toolbar_ind][2];\n","        var method_name = mpl.toolbar_items[toolbar_ind][3];\n","\n","        if (!name) {\n","            /* Instead of a spacer, we start a new button group. */\n","            if (buttonGroup.hasChildNodes()) {\n","                toolbar.appendChild(buttonGroup);\n","            }\n","            buttonGroup = document.createElement('div');\n","            buttonGroup.classList = 'btn-group';\n","            continue;\n","        }\n","\n","        button = fig.buttons[name] = document.createElement('button');\n","        button.classList = 'btn btn-default';\n","        button.href = '#';\n","        button.title = name;\n","        button.innerHTML = '<i class=\"fa ' + image + ' fa-lg\"></i>';\n","        button.addEventListener('click', on_click_closure(method_name));\n","        button.addEventListener('mouseover', on_mouseover_closure(tooltip));\n","        buttonGroup.appendChild(button);\n","    }\n","\n","    if (buttonGroup.hasChildNodes()) {\n","        toolbar.appendChild(buttonGroup);\n","    }\n","\n","    // Add the status bar.\n","    var status_bar = document.createElement('span');\n","    status_bar.classList = 'mpl-message pull-right';\n","    toolbar.appendChild(status_bar);\n","    this.message = status_bar;\n","\n","    // Add the close button to the window.\n","    var buttongrp = document.createElement('div');\n","    buttongrp.classList = 'btn-group inline pull-right';\n","    button = document.createElement('button');\n","    button.classList = 'btn btn-mini btn-primary';\n","    button.href = '#';\n","    button.title = 'Stop Interaction';\n","    button.innerHTML = '<i class=\"fa fa-power-off icon-remove icon-large\"></i>';\n","    button.addEventListener('click', function (_evt) {\n","        fig.handle_close(fig, {});\n","    });\n","    button.addEventListener(\n","        'mouseover',\n","        on_mouseover_closure('Stop Interaction')\n","    );\n","    buttongrp.appendChild(button);\n","    var titlebar = this.root.querySelector('.ui-dialog-titlebar');\n","    titlebar.insertBefore(buttongrp, titlebar.firstChild);\n","};\n","\n","mpl.figure.prototype._remove_fig_handler = function (event) {\n","    var fig = event.data.fig;\n","    if (event.target !== this) {\n","        // Ignore bubbled events from children.\n","        return;\n","    }\n","    fig.close_ws(fig, {});\n","};\n","\n","mpl.figure.prototype._root_extra_style = function (el) {\n","    el.style.boxSizing = 'content-box'; // override notebook setting of border-box.\n","};\n","\n","mpl.figure.prototype._canvas_extra_style = function (el) {\n","    // this is important to make the div 'focusable\n","    el.setAttribute('tabindex', 0);\n","    // reach out to IPython and tell the keyboard manager to turn it's self\n","    // off when our div gets focus\n","\n","    // location in version 3\n","    if (IPython.notebook.keyboard_manager) {\n","        IPython.notebook.keyboard_manager.register_events(el);\n","    } else {\n","        // location in version 2\n","        IPython.keyboard_manager.register_events(el);\n","    }\n","};\n","\n","mpl.figure.prototype._key_event_extra = function (event, _name) {\n","    // Check for shift+enter\n","    if (event.shiftKey && event.which === 13) {\n","        this.canvas_div.blur();\n","        // select the cell after this one\n","        var index = IPython.notebook.find_cell_index(this.cell_info[0]);\n","        IPython.notebook.select(index + 1);\n","    }\n","};\n","\n","mpl.figure.prototype.handle_save = function (fig, _msg) {\n","    fig.ondownload(fig, null);\n","};\n","\n","mpl.find_output_cell = function (html_output) {\n","    // Return the cell and output element which can be found *uniquely* in the notebook.\n","    // Note - this is a bit hacky, but it is done because the \"notebook_saving.Notebook\"\n","    // IPython event is triggered only after the cells have been serialised, which for\n","    // our purposes (turning an active figure into a static one), is too late.\n","    var cells = IPython.notebook.get_cells();\n","    var ncells = cells.length;\n","    for (var i = 0; i < ncells; i++) {\n","        var cell = cells[i];\n","        if (cell.cell_type === 'code') {\n","            for (var j = 0; j < cell.output_area.outputs.length; j++) {\n","                var data = cell.output_area.outputs[j];\n","                if (data.data) {\n","                    // IPython >= 3 moved mimebundle to data attribute of output\n","                    data = data.data;\n","                }\n","                if (data['text/html'] === html_output) {\n","                    return [cell, data, j];\n","                }\n","            }\n","        }\n","    }\n","};\n","\n","// Register the function which deals with the matplotlib target/channel.\n","// The kernel may be null if the page has been refreshed.\n","if (IPython.notebook.kernel !== null) {\n","    IPython.notebook.kernel.comm_manager.register_target(\n","        'matplotlib',\n","        mpl.mpl_figure_comm\n","    );\n","}\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<div id='4ae2019f-94a3-4499-80fe-1ed101a30f31'></div>"]},"metadata":{}},{"output_type":"error","ename":"AttributeError","evalue":"'NoneType' object has no attribute 'remove_callback'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-a1ae6ee08475>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Position of Cars over Time'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'upper left'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'small'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    612\u001b[0m     \"\"\"\n\u001b[1;32m    613\u001b[0m     \u001b[0m_warn_if_gui_out_of_main_thread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 614\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_get_backend_mod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    615\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    616\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib_inline/backend_inline.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(close, block)\u001b[0m\n\u001b[1;32m     97\u001b[0m         \u001b[0;31m# close triggers gc.collect, which can be slow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mclose\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mGcf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_all_fig_managers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m             \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'all'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mclose\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m   1192\u001b[0m             \u001b[0m_pylab_helpers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGcf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdestroy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1193\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'all'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1194\u001b[0;31m         \u001b[0m_pylab_helpers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGcf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdestroy_all\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1195\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         \u001b[0m_pylab_helpers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGcf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdestroy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/_pylab_helpers.py\u001b[0m in \u001b[0;36mdestroy_all\u001b[0;34m(cls)\u001b[0m\n\u001b[1;32m     79\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmanager\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m             \u001b[0mmanager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmpl_disconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cidgcf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 81\u001b[0;31m             \u001b[0mmanager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdestroy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     82\u001b[0m         \u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/backends/backend_nbagg.py\u001b[0m in \u001b[0;36mdestroy\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    142\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mcomm\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweb_sockets\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m             \u001b[0mcomm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_close\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 144\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclearup_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    146\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclearup_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/backends/backend_nbagg.py\u001b[0m in \u001b[0;36mclearup_closed\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweb_sockets\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 152\u001b[0;31m             \u001b[0mCloseEvent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"close_event\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_process\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    154\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mremove_comm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcomm_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36m_process\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1187\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_process\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1188\u001b[0m         \u001b[0;34m\"\"\"Process this event on ``self.canvas``, then unset ``guiEvent``.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1189\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1190\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mguiEvent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1191\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/cbook.py\u001b[0m in \u001b[0;36mprocess\u001b[0;34m(self, s, *args, **kwargs)\u001b[0m\n\u001b[1;32m    364\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    365\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexception_handler\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 366\u001b[0;31m                         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexception_handler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    367\u001b[0m                     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    368\u001b[0m                         \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/cbook.py\u001b[0m in \u001b[0;36m_exception_printer\u001b[0;34m(exc)\u001b[0m\n\u001b[1;32m    108\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_exception_printer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_get_running_interactive_framework\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"headless\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 110\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    111\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m         \u001b[0mtraceback\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_exc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/cbook.py\u001b[0m in \u001b[0;36mprocess\u001b[0;34m(self, s, *args, **kwargs)\u001b[0m\n\u001b[1;32m    359\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mfunc\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 361\u001b[0;31m                     \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    362\u001b[0m                 \u001b[0;31m# this does not capture KeyboardInterrupt, SystemExit,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    363\u001b[0m                 \u001b[0;31m# and GeneratorExit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36m_stop\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    938\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmpl_disconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_resize_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    939\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmpl_disconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_close_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 940\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevent_source\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove_callback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_step\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    941\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevent_source\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    942\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'remove_callback'"]}],"source":["#@title Run this after solving the exercise to see distance-time plot\n","\n","%matplotlib inline\n","for i in range(num_cars):\n","    plt.plot(time_points, positions[i], label=f'Car {i+1}')\n","\n","plt.xlabel('Time (s)')\n","plt.ylabel('Position (m)')\n","plt.title('Position of Cars over Time')\n","plt.legend(loc='upper left', fontsize='small')\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"abGGrjY5VpnY","cellView":"form"},"outputs":[],"source":["#@title Run this after solving the exercise to see velocity-time plot\n","%matplotlib inline\n","for i in range(num_cars):\n","    plt.plot(time_points, velocities[i], label=f'Car {i+1}')\n","\n","plt.xlabel('Time (s)')\n","plt.ylabel('Velocity (m/s)')\n","plt.title('Velocity of Cars over Time')\n","plt.legend(loc='upper left', fontsize='small')\n","plt.show()"]},{"cell_type":"markdown","source":["# This is the end of this exercise, wait before moving on"],"metadata":{"id":"MgyD72-gzrOg"}},{"cell_type":"code","source":["#@title Run this !!!\n","def setup_animation(num_cars, initial_positions, positions):\n","    # Set up the figure and axes\n","    fig, ax = plt.subplots(figsize=(10, 5))\n","\n","    road_length = 500\n","    ax.set_xlim(0, road_length)\n","    ax.set_ylim(-25, 25)  # Made the view more compact\n","    ax.set_aspect('equal')\n","\n","    # Draw the road (simplified)\n","    road = plt.Rectangle((0, -10), road_length, 30, color='gray', alpha=0.5)\n","    ax.add_patch(road)\n","\n","    # Car representations as smaller rectangles\n","    car_width = 5  # Reduced from 10\n","    car_height = 4  # Reduced from 8\n","    cars = [plt.Rectangle((initial_positions[i], -car_height / 2),\n","                        car_width, car_height, color='blue')\n","            for i in range(num_cars)]\n","\n","    for car in cars:\n","        ax.add_patch(car)\n","\n","    # Mark the 100m position for speed check\n","    ax.axvline(x=100, color='red', linestyle='--', alpha=0.5)\n","    ax.text(100, 15, '100m - Speed Check', rotation=90)\n","\n","    def init():\n","        for i, car in enumerate(cars):\n","            car.set_xy((initial_positions[i], -car_height / 2))\n","        return cars\n","\n","    def update(frame):\n","        for i, car in enumerate(cars):\n","            x = positions[i][frame]\n","            car.set_x(x)\n","        return cars\n","\n","    return fig, init, update\n","\n","def calculate_driver_parameters(recklessness):\n","    \"\"\"Calculate acceleration, typical distance, and comfortable distance based on recklessness.\"\"\"\n","    # Linear interpolation between min and max values\n","    acceleration = 0.5 + (4 - 0.5) * (recklessness / 10)\n","    typical_distance = 20 - (20 - 5) * (recklessness / 10)\n","    comfortable_distance = 10 - (10 - 3) * (recklessness / 10)\n","    deceleration_point = 150 / (2 * acceleration)\n","\n","    return acceleration, typical_distance, comfortable_distance, deceleration_point\n","\n","def calculate_initial_positions(num_cars, typical_distances):\n","    \"\"\"Calculate initial positions for all cars based on typical distances.\"\"\"\n","    positions = [0]  # First car starts at 0\n","    for i in range(1, num_cars):\n","        pos = positions[-1] - typical_distances[i-1]\n","        positions.append(pos)\n","    return positions\n","\n","def calculate_required_deceleration(position, velocity, target_position, target_velocity):\n","    \"\"\"Calculate required deceleration to reach target velocity at target position.\"\"\"\n","    distance = target_position - position\n","    if distance <= 0:\n","        return -float('inf')\n","\n","    # Using kinematic equations: v_f^2 = v_i^2 + 2a*d\n","    required_decel = (target_velocity**2 - velocity**2) / (2 * distance)\n","    return required_decel\n","\n","def calculate_spacing_acceleration(distance_diff, max_accel):\n","    \"\"\"Calculate acceleration based on distance difference from comfortable distance.\"\"\"\n","    if abs(distance_diff) <= 1:\n","        return np.sign(distance_diff) * 0.3\n","    elif abs(distance_diff) >= 5:\n","        return np.sign(distance_diff) * max_accel\n","    else:\n","        # Linear interpolation between 0.3 and max_accel\n","        accel = 0.3 + (max_accel - 0.3) * (abs(distance_diff) - 1) / 4\n","        return np.sign(distance_diff) * accel\n","\n","def run_simulation(recklessness_values, reaction_speed_values, num_cars=10, dt=0.1, total_time=30):\n","    # Initialize driver parameters\n","    driver_params = {}\n","    for i in range(num_cars):\n","        recklessness = recklessness_values[i+1]\n","        accel, typ_dist, comf_dist, decel_point = calculate_driver_parameters(recklessness)\n","        driver_params[i] = {\n","            'acceleration': accel,\n","            'typical_distance': typ_dist,\n","            'comfortable_distance': comf_dist,\n","            'deceleration_point': decel_point,\n","            'reaction_time': reaction_speed_values[i+1],\n","            'time_since_last_reaction': 0,\n","            'ticket_reported': False,  # Ticket tracking parameter\n","            'last_emergency_stop_position': None,  # Track position of last emergency stop\n","            'crashed': False  # Track if car has crashed\n","        }\n","\n","    # Initialize simulation arrays\n","    time_points = np.arange(0, total_time, dt)\n","    initial_positions = calculate_initial_positions(num_cars,\n","                                                 [params['typical_distance'] for params in driver_params.values()])\n","\n","    positions = {i: [pos] for i, pos in enumerate(initial_positions)}\n","    velocities = {i: [20] for i in range(num_cars)}\n","    accelerations = {i: [params['acceleration']/8] for i, params in driver_params.items()}\n","\n","    # Simulation loop\n","    for t in time_points[1:]:\n","        for i in range(num_cars):\n","            curr_pos = positions[i][-1]\n","            curr_vel = velocities[i][-1]\n","            curr_accel = accelerations[i][-1]\n","            params = driver_params[i]\n","\n","            # Check for immediate collision conditions\n","            if i > 0 and curr_pos >= positions[i-1][-1] and not params['crashed']:\n","                print(f\"Car {i+1} crashed!\")\n","                velocities[i].append(0)\n","                accelerations[i].append(0)\n","                positions[i].append(curr_pos)\n","                params['crashed'] = True\n","                continue\n","\n","            # Check for unsafe distance\n","            if i > 0 and (positions[i-1][-1] - curr_pos) <= 1:\n","                # Check if we're more than 5 meters from the last emergency stop\n","                should_report = True\n","                if params['last_emergency_stop_position'] is not None:\n","                    distance_from_last_stop = abs(curr_pos - params['last_emergency_stop_position'])\n","                    if distance_from_last_stop < 5:\n","                        should_report = False\n","\n","                if should_report:\n","                    print(f\"Car {i+1} emergency stop!\")\n","                    params['last_emergency_stop_position'] = curr_pos\n","\n","                velocities[i].append(0)\n","                accelerations[i].append(0)\n","                positions[i].append(curr_pos)\n","                continue\n","\n","            # Update acceleration based on reaction time\n","            params['time_since_last_reaction'] += dt\n","            if params['time_since_last_reaction'] >= params['reaction_time']:\n","                params['time_since_last_reaction'] = 0\n","\n","                # Check if approaching speed limit point\n","                if 95 <= curr_pos <= 100:\n","                    if curr_vel > 10 and not params['ticket_reported']:\n","                        print(f\"Car {i+1} got a ticket!\")\n","                        params['ticket_reported'] = True\n","\n","                # Calculate new acceleration based on various factors\n","                new_accel = curr_accel\n","\n","                # After 100m mark\n","                if curr_pos > 100:\n","                    if curr_vel < 20:\n","                        new_accel = params['acceleration']\n","                    else:\n","                        new_accel = 0\n","                # Before 100m mark\n","                else:\n","                    # Check if need to start decelerating for 100m mark\n","                    required_decel = calculate_required_deceleration(curr_pos, curr_vel, 100, 10)\n","                    if required_decel < 0:  # Need to start decelerating\n","                        new_accel = max(-params['acceleration'], required_decel)\n","\n","                # Adjust for spacing with car in front\n","                if i > 0:\n","                    curr_spacing = positions[i-1][-1] - curr_pos\n","                    desired_spacing = params['comfortable_distance']\n","                    spacing_diff = curr_spacing - desired_spacing\n","                    spacing_accel = calculate_spacing_acceleration(spacing_diff, params['acceleration'])\n","                    new_accel = min(new_accel, spacing_accel)\n","\n","                accelerations[i].append(new_accel)\n","            else:\n","                accelerations[i].append(curr_accel)\n","\n","            # Update velocity and position\n","            new_vel = curr_vel + accelerations[i][-1] * dt\n","            new_vel = max(0, new_vel)  # Ensure velocity doesn't go negative\n","            new_pos = curr_pos + curr_vel * dt + 0.5 * accelerations[i][-1] * dt**2\n","\n","            velocities[i].append(new_vel)\n","            positions[i].append(new_pos)\n","\n","    return time_points, positions, velocities, accelerations\n","\n","def simulate_and_animate(recklessness_values, reaction_speed_values,time_points, positions, velocities, accelerations):\n","\n","    # Prepare position data for animation\n","    position_lists = [list(positions[i]) for i in range(len(positions))]\n","\n","    # Create animation\n","    fig, init, update = setup_animation(len(positions),\n","                                      [positions[i][0] for i in range(len(positions))],\n","                                      position_lists)\n","\n","    # Create and display animation\n","    ani = FuncAnimation(fig, update, frames=len(time_points),\n","                       init_func=init, blit=True, interval=40)\n","    return HTML(ani.to_jshtml())"],"metadata":{"cellView":"form","id":"SI2XPZFx2Uv6","executionInfo":{"status":"aborted","timestamp":1742564339534,"user_tz":-60,"elapsed":14,"user":{"displayName":"Claire Garretsen","userId":"09031616551152306623"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title Example animation and scenario -- run this cell and look at the code\n","\n","# Driver behavior parameters\n","recklessness_values = { # Example value, should be set (0-10)\n","    1: 3,\n","    2: 10,\n","    3: 6,\n","    4: 3,\n","    5: 10,\n","    6: 5,\n","    7: 3,\n","    8: 1,\n","    9: 5,\n","    10: 3\n","}\n","\n","reaction_speed_values = { # Example values, should be set (0.2-2.0)\n","    1: 0.5,\n","    2: 2,\n","    3: 2,\n","    4: 1,\n","    5: 0.6,\n","    6: 0.5,\n","    7: 0.4,\n","    8: 0.2,\n","    9: 0.2,\n","    10: 0.3\n","}\n","\n","time_points, positions, velocities, accelerations = run_simulation(recklessness_values, reaction_speed_values)\n","simulate_and_animate(recklessness_values, reaction_speed_values,time_points, positions, velocities, accelerations)"],"metadata":{"id":"CaEEiWdp2K2m","executionInfo":{"status":"error","timestamp":1742564339529,"user_tz":-60,"elapsed":338,"user":{"displayName":"Claire Garretsen","userId":"09031616551152306623"}},"colab":{"base_uri":"https://localhost:8080/","height":193},"outputId":"8db74499-567c-4470-dc91-f8e350135d3e"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'run_simulation' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-3e0c373c8ebe>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     28\u001b[0m }\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m \u001b[0mtime_points\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpositions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvelocities\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccelerations\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrun_simulation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecklessness_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreaction_speed_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m \u001b[0msimulate_and_animate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecklessness_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreaction_speed_values\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtime_points\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpositions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvelocities\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccelerations\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'run_simulation' is not defined"]}]},{"cell_type":"code","source":["#@title Make a distance-time plot\n","\n","plt.figure(figsize=(10, 6))\n","for i in range(len(positions)):\n","    plt.plot(time_points, positions[i], label=f'Car {i+1}')\n","plt.xlabel(\"Time (s)\")\n","plt.ylabel(\"Position (m)\")\n","plt.title(\"Distance-Time Plot for Cars\")\n","plt.legend(loc='upper left', fontsize='small')\n","plt.show()"],"metadata":{"cellView":"form","id":"YFj7XKxI2-eH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title Play with the code below 1\n","\n","# Driver behavior parameters\n","recklessness_values = { # Example value, should be set (0-10)\n","    1: 3,\n","    2: 2,\n","    3: 3,\n","    4: 2,\n","    5: 4,\n","    6: 5,\n","    7: 3,\n","    8: 1,\n","    9: 5,\n","    10: 3\n","}\n","\n","reaction_speed_values = { # Example values, should be set (0.2-2.0)\n","    1: 0.5,\n","    2: 0.9,\n","    3: 0.8,\n","    4: 0.7,\n","    5: 0.6,\n","    6: 0.5,\n","    7: 0.4,\n","    8: 0.2,\n","    9: 0.2,\n","    10: 0.3\n","}\n","\n","time_points, positions, velocities, accelerations = run_simulation(recklessness_values, reaction_speed_values)\n","simulate_and_animate(recklessness_values, reaction_speed_values,time_points, positions, velocities, accelerations)"],"metadata":{"cellView":"form","id":"3wM3aU755Iu5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title Play with the code below 2\n","\n","# Driver behavior parameters\n","recklessness_values = { # Example value, should be set (0-10)\n","    1: 3,\n","    2: 2,\n","    3: 3,\n","    4: 2,\n","    5: 4,\n","    6: 5,\n","    7: 3,\n","    8: 1,\n","    9: 5,\n","    10: 3\n","}\n","\n","reaction_speed_values = { # Example values, should be set (0.2-2.0)\n","    1: 0.5,\n","    2: 0.9,\n","    3: 0.8,\n","    4: 0.7,\n","    5: 0.6,\n","    6: 0.5,\n","    7: 0.4,\n","    8: 0.2,\n","    9: 0.2,\n","    10: 0.3\n","}\n","\n","time_points, positions, velocities, accelerations = run_simulation(recklessness_values, reaction_speed_values)\n","simulate_and_animate(recklessness_values, reaction_speed_values,time_points, positions, velocities, accelerations)"],"metadata":{"cellView":"form","id":"4ATeevvX5M6G"},"execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.13"},"colab":{"provenance":[{"file_id":"17OtNFfpwxz8RuFHjdU5LMtto404mpENH","timestamp":1742410729249}],"collapsed_sections":["MgyD72-gzrOg"]}},"nbformat":4,"nbformat_minor":0}